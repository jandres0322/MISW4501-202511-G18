apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-app
  labels:
    app: user-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-app
  template:
    metadata:
      labels:
        app: user-app
    spec:
      containers:
      - name: user-app
        image: us-central1-docker.pkg.dev/proyecto-final-452204/uniandes-misw-proyecto-final/users:1.0
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: "POSTGRES_DB_URI"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: uri
          - name: "JWT_SECRET_KEY"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: JWT_SECRET_KEY
          - name: "POSTGRES_DB"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_DB
          - name: "POSTGRES_USER"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_USER
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_PASSWORD
          - name: "TZ"
            value: America/Bogota
        ports:
          - containerPort: 5000
        # Realizar pull siempre a la imagen
        imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: user-app-service-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 5000
    type: HTTP
    requestPath: /users/ping
---
kind: Service
apiVersion: v1
metadata:
  name: user-app-service
  annotations:
    cloud.google.com/backend-config: '{"default": "user-app-service-config"}'
spec:
  type: NodePort
  selector:
    app: user-app
  # Declaracion y redireccion del trafico por los puertos
  # En este caso, estamos ocupando el puerto 80 para la conexión HTTP
  # y lo estamos redirigiendo al 3000 de la red virtual del pod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
      nodePort: 31017
---
# 
# PRODUCTS
# 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-app
  labels:
    app: product-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-app
  template:
    metadata:
      labels:
        app: product-app
    spec:
      containers:
      - name: product-app
        image: us-central1-docker.pkg.dev/proyecto-final-452204/uniandes-misw-proyecto-final/products:1.0
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: "POSTGRES_DB_URI"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: uri
          - name: "USER_SERVICE_URL"
            value:
              "http://user-app-service"
          - name: "POSTGRES_DB"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_DB
          - name: "POSTGRES_USER"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_USER
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_PASSWORD
          - name: "TZ"
            value: America/Bogota
        ports:
          - containerPort: 5001
        # Realizar pull siempre a la imagen
        imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: product-app-service-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 5001
    type: HTTP
    requestPath: /products/ping
---
kind: Service
apiVersion: v1
metadata:
  name: product-app-service
  annotations:
    cloud.google.com/backend-config: '{"default": "product-app-service-config"}'
spec:
  type: NodePort
  selector:
    app: product-app
  # Declaracion y redireccion del trafico por los puertos
  # En este caso, estamos ocupando el puerto 80 para la conexión HTTP
  # y lo estamos redirigiendo al 3000 de la red virtual del pod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5001
      nodePort: 31018
---
# 
# ORDERS
# 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-app
  labels:
    app: order-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-app
  template:
    metadata:
      labels:
        app: order-app
    spec:
      containers:
      - name: order-app
        image: us-central1-docker.pkg.dev/proyecto-final-452204/uniandes-misw-proyecto-final/orders:1.0
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
          - name: "POSTGRES_DB_URI"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: uri
          - name: "USER_SERVICE_URL"
            value:
              "http://user-app-service"
          - name: "PRODUCT_SERVICE_URL"
            value:
              "http://product-app-service"
          - name: "POSTGRES_DB"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_DB
          - name: "POSTGRES_USER"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_USER
          - name: "POSTGRES_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: appsecrets
                key: POSTGRES_PASSWORD
          - name: "TZ"
            value: America/Bogota
        ports:
          - containerPort: 5002
        # Realizar pull siempre a la imagen
        imagePullPolicy: Always
      volumes:
        - name: appsecrets-volume
          secret:
            secretName: appsecrets
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: order-app-service-config
spec:
  healthCheck:
    checkIntervalSec: 30
    port: 5002
    type: HTTP
    requestPath: /orders/ping
---
kind: Service
apiVersion: v1
metadata:
  name: order-app-service
  annotations:
    cloud.google.com/backend-config: '{"default": "order-app-service-config"}'
spec:
  type: NodePort
  selector:
    app: order-app
  # Declaracion y redireccion del trafico por los puertos
  # En este caso, estamos ocupando el puerto 80 para la conexión HTTP
  # y lo estamos redirigiendo al 3000 de la red virtual del pod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5002
      nodePort: 31019
###################################
# INGRESS
###################################
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway-ingress
  labels:
    name: gateway-ingress
spec:
  rules:
  - http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: user-app-service
            port:
              number: 80
      - pathType: Prefix
        path: /users
        backend:
          service:
            name: user-app-service
            port:
              number: 80
      - pathType: Prefix
        path: /products
        backend:
          service:
            name: product-app-service
            port:
              number: 80
      - pathType: Prefix
        path: /orders
        backend:
          service:
            name: order-app-service
            port:
              number: 80
